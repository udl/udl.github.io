---
layout: post
title:  "Introduction to Docker"
date:   2014-02-18 15:10:09
categories: devops
---

![Docker whale](https://www.docker.io/static/img/homepage-docker-logo.png)

#tl;dr
This post gives a highlevel overview of **docker**. It also sums up what I've learned setting up **elasticsearch**, **neo4j** and a ruby **sinatra** service in docker containers.

#What is docker?

Docker is basically an open source toolset for creating and managing VM-like [linux containers (LXC)](http://linuxcontainers.org/).

The overall goal is to have **cheap**, **portable**, **composable**, **single responsibility** systems.

###cheap
Linux containers are extremely lightweight compared to virtual machines, because they share some aspects of the hosts OS (like the kernel). This makes booting up a container really cheap and fast. If you're interested in a detailled performance analysis, you should read this [comparison](http://dtrace.org/blogs/brendan/2013/01/11/virtualization-performance-zones-kvm-xen/). It compares solaris zones, which are similar to linux containers, to xen and kvm.

###portable
[Since version 0.7](http://tech-beta.slashdot.org/story/13/11/26/2317252/docker-07-runs-on-all-linux-distributions) docker containers run on all major linux distributions. As the system adds a layer on top of the hosts filesystem (called *[aufs](http://aufs.sourceforge.net/aufs.html)*), it doesn't care about the used filesystem. This means you can create the container on your developer ubuntu system with ext4 filesystem and then deploy the final version to a fedora VM inside an amazon EC2 instance with ext3.

###composable
Docker makes it easy to expose ports to the host system or other containers or let containers use disk volumes of each other. All this can be done with simple command line switches, you don't have to touch iptables or mtab.

###single responsibility
Developers know the [single responsibility principle](http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod) from object oriented coding. The unix world knows it as ["do one thing and do it well"](http://en.wikipedia.org/wiki/Unix_philosophy).
This principle helps making your systems clear in what they do and easier to maintain.

For further reading on *what docker is* see this [infoq article](http://www.infoq.com/articles/docker-containers/) or take a look at these slides:
<iframe src="http://www.slideshare.net/slideshow/embed_code/28618034" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>

#What docker is not?


#Building blocks

###Image

###Container

###Dockerfile


#Leave theory, talk practice

###Install docker
As docker is built on top of [linux containers (LXC)](http://linuxcontainers.org/), the best way to try it is on a linux computer.
You can use it on other OSes (like [OS X](http://docs.docker.io/en/latest/installation/mac/)) (because it runs well in already virtualized environments), but I haven't tried that yet.
The installation is well documented, so I won't repeat that here.
Just take those 2 links and come back once you've installed docker:

* [docker.io](http://docs.docker.io/en/latest/installation/)
* [digitalocean](https://www.digitalocean.com/community/articles/how-to-install-and-use-docker-getting-started/) 

###Run an image
Now that you have docker installed, you're ready to roll!
When you type

{% highlight bash %}
docker run base ping google.com
{% endhighlight %}

you should see something like this:

![running ping google on a base image]({{ site.url }}/images/docker_base_ping.png)

Now what happens there?
{% highlight bash %}
docker run base
{% endhighlight %}

tells docker to start a container from the **base** image. The cool thing is that you can pass a command to the container which it will execute: *ping google.com*.

You can try the same with

{% highlight bash %}
docker run base ls -la
{% endhighlight %}

(Everything you can do on the command line: [Docker CLI reference](http://docs.docker.io/en/latest/commandline/cli/))

###I want more functionality

There's not much included in the base image, because it is meant to serve as a starting point. There isn't even curl installed. The docker ecosystem provides you another nice thing: the 
[docker index](https://index.docker.io/).

This is a database of predefined images from the docker guys and users.
A quick search for *curl*, for example, brings this image up: [https://index.docker.io/u/speg03/curl/](https://index.docker.io/u/speg03/curl/).

You can install it with
{% highlight bash %}
docker pull speg03/curl
{% endhighlight %}

and the result:

![installing a new docker image]({{ site.url }}/images/docker_pull.png)

Now you can *curl*, finally!
{% highlight bash %}
docker run -t -i speg03/curl -XGET http://google.com
{% endhighlight %}

which yields

![result of curl from the docker image]({{ site.url }}/images/docker_curl.png)

But wait, isn't there the *curl* command missing? You're absolutely right.

If you take a look at the [Dockerfile](https://github.com/speg03/docker-curl/blob/master/Dockerfile), you can see the **ENTRYPOINT** statement at the bottom:

{% highlight bash %}
ENTRYPOINT ["curl"]
{% endhighlight %}

This command get's executed automatically when you spawn a container from an image. Every container has exactly **one** purpose, right? So this is where it goes. Let's move on to the next lesson: the Dockerfiles.

###Create your own shiny new image with a Dockerfile
[Dockerfile reference](http://docs.docker.io/en/latest/use/builder/)

###Let it run

###But, Mum, I'd like to store data!
[Volumes](http://crosbymichael.com/advanced-docker-volumes.html)

###Access ports from another container
[this blog post](http://docs.docker.io/en/latest/use/working_with_links_names/)

#Conclusion
